REP: 1
Title: REP Purpose and Guidelines
Version: 1
Last-Modified: 06-Oct-2014 
Author: Bill Anderson <therealbill@me.com>
Status: Draft
Type: Process
Content-Type: text/x-rst
Created: 06-Oct-2013


What is a REP?
==============

REP stands for Redis Enhancement Proposal.  A REP is a design
document providing information to the Redis community, or describing
a new feature for Redis or its processes or environment.  The REP
should provide a concise technical specification of the feature and a
rationale for the feature.

We intend REPs to be the primary mechanisms for proposing major new
features, for collecting community input on an issue, and for
documenting the design decisions that have gone into Redis.  The REP
author is responsible for building consensus within the community and
documenting dissenting opinions.

Because the REPs are maintained as text files in a versioned
repository, their revision history is the historical record of the
feature proposal [1]_.


REP Types
=========

There are three kinds of REP:

1. A **Features Track** REP describes a new feature or implementation
   for Redis. It may also describe an interoperability standard that will
   be supported outside the core Redis repository for current Redis versions
   before a subsequent REP adds support in a future version.

2. An **Informational** REP describes a Redis design issue, or
   provides general guidelines or information to the Redis community,
   but does not propose a new feature.  Informational REPs do not
   necessarily represent a Redis community consensus or
   recommendation, so users and implementers are free to ignore
   Informational REPs or follow their advice.

3. A **Process** REP describes a process surrounding Redis, or
   proposes a change to (or an event in) a process.  Process REPs are
   like Features Track REPs but apply to areas other than the Redis
   server itself.  They may propose an implementation, but not to
   Redis's codebase; they often require community consensus; unlike
   Informational REPs, they are more than recommendations, and users
   are typically not free to ignore them.  Examples include
   procedures, guidelines, changes to the decision-making process, and
   changes to the tools or environment used in Redis development.
   Any meta-REP is also considered a Process REP.


REP Workflow
============


Redis's BDFL
-------------

There are several reference in this REP to the "BDFL". This initialism is
borrowed from Python and stands for "Benevolent Dictator for Life"; referring
in this case to Salvatore Sanfilippo the original creator of, and the final
design authority for, Redis.


REP Editors
-----------

The REP editors are individuals responsible for managing the administrative
and editorial aspects of the REP workflow (e.g. assigning REP numbers and
changing their status).  See `REP Editor Responsibilities & Workflow`_ for
details.  The current editors are:

* Salvatore Sanfilippo
* Bill Anderson
* Matt Stancliff

REP editorship is by invitation of the current editors.  The address
<reps@redis.com> is a mailing list for contacting the REP editors.  All
email related to REP administration (such as requesting a REP number
or providing an updated version of a REP for posting) should be sent to
this address (no cross-posting please).


Submitting a REP
----------------

The REP process begins with a new idea for Redis.  It is highly
recommended that a single REP contain a single key proposal or new
idea. Small enhancements or patches often don't need
a REP and can be injected into the Redis development workflow with a
patch submission to the Redis `issue tracker`_. The more focused the
REP, the more successful it tends to be.  The REP editors reserve the
right to reject REP proposals if they appear too unfocused or too
broad.  If in doubt, split your REP into several well-focused ones.

Each REP must have a champion -- someone who writes the REP using the
style and format described below, shepherds the discussions in the
appropriate forums, and attempts to build community consensus around
the idea.  The REP champion (a.k.a. Author) should first attempt to
ascertain whether the idea is REP-able.  Posting to the
Redis Google group (a.k.a. redis-db@googlegroups.com mailing
list) or the is the best way to go about this.

Vetting an idea publicly before going as far as writing a REP is meant
to save the potential author time. Many ideas have been brought
forward for changing Redis that have been rejected for various
reasons. Asking the Redis community first if an idea is original
helps prevent too much time being spent on something that is
guaranteed to be rejected based on prior discussions (searching
the internet does not always do the trick). It also helps to make sure
the idea is applicable to the entire community and not just the author.
Just because an idea sounds good to the author does not
mean it will work for most people in most areas where Redis is used.

Once the champion has asked the Redis community as to whether an
idea has any chance of acceptance, a draft REP should be presented to
redis-dev.  This gives the author a chance to flesh out the draft
REP to make properly formatted, of high quality, and to address
initial concerns about the proposal.

Following a discussion on redis-dev, the proposal should be sent as a
draft REP to the REP editors. The draft must be written
in REP style as described below, else it will be sent back without further
regard until proper formatting rules are followed (although minor errors
will be corrected by the editors).

If the REP editors approve, they will assign the REP a number, label it
as Features Track, Informational, or Process, give it status "Draft",
and create and check-in the initial draft of the REP.  The REP editors
will not unreasonably deny a REP.  Reasons for denying REP status
include duplication of effort, being technically unsound, not
providing proper motivation or addressing backwards compatibility, or
not in keeping with the Redis philosophy.  The BDFL can be consulted
during the approval phase, and is the final arbiter of the draft's
REP-ability.

Developers with Github push privileges for the `REP repository`_ may claim
REP numbers directly by creating and committing a new REP. When doing so,
the developer must handle the tasks that would normally be taken care of by
the REP editors (see `REP Editor Responsibilities & Workflow`_). This
includes ensuring the initial version meets the expected standards for
submitting a REP. Alternately, even developers may choose to submit REPs
through the REP editors. When doing so, let the REP editors know you have
Github push privileges and they can guide you through the process of updating
the REP repository directly.

As updates are necessary, the REP author can check in new versions if they
(or a collaborating developer) have Github push privileges, or else they can
email new REP versions to the REP editors for publication.

After a REP number has been assigned, a draft REP may be discussed further on
redis-dev (getting a REP number assigned early can be useful for ease of
reference, especially when multiple draft REPs are being considered at the
same time). Eventually, all Features Track REPs must  be sent to the
`redis-dev list <mailto:redis-dev@googlegroups.com>`__ for review as described
in the next section.

Features Track REPs consist of two parts, a design document and a
reference implementation.  It is generally recommended that at least a
prototype implementation be co-developed with the REP, as ideas that sound
good in principle sometimes turn out to be impractical when subjected to the
test of implementation.

REP authors are responsible for collecting community feedback on a REP
before submitting it for review. However, wherever possible, long
open-ended discussions on public mailing lists should be avoided.
Strategies to keep the discussions efficient include: setting up a
separate SIG mailing list for the topic, having the REP author accept
private comments in the early design phases, setting up a wiki page, etc.
REP authors should use their discretion here.


REP Review & Resolution
-----------------------

Once the authors have completed a REP, they may request a review for
style and consistency from the REP editors.  However, the content and
final acceptance of the REP must be requested of the BDFL, usually via
an email to the redis-dev mailing list.  REPs are reviewed by the
BDFL and his chosen consultants, who may accept or reject a REP or
send it back to the author(s) for revision.  For a REP that is
predetermined to be acceptable (e.g., it is an obvious win as-is
and/or its implementation has already been checked in) the BDFL may
also initiate a REP review, first notifying the REP author(s) and
giving them a chance to make revisions.

The final authority for REP approval is the BDFL. However, whenever a new
REP is put forward, any core developer that believes they are suitably
experienced to make the final decision on that REP may offer to serve as
the BDFL's delegate (or "REP czar") for that REP. If their self-nomination
is accepted by the other core developers and the BDFL, then they will have
the authority to approve (or reject) that REP. This process happens most
frequently with REPs where the BDFL has granted in principle approval for
*something* to be done, but there are details that need to be worked out
before the REP can be accepted.

If the final decision on a REP is to be made by a delegate rather than
directly by the BDFL, this will be recorded by including the
"BDFL-Delegate" header in the REP.

REP review and resolution may also occur on a list other than redis-dev
(for example, distutils-sig for packaging related REPs that don't
immediately affect the standard library). In this case, the "Discussions-To"
heading in the REP will identify the appropriate alternative list where
discussion, review and pronouncement on the REP will occur.

For a REP to be accepted it must meet certain minimum criteria.  It
must be a clear and complete description of the proposed enhancement.
The enhancement must represent a net improvement.  The proposed
implementation, if applicable, must be solid and must not complicate
the interpreter unduly.  Finally, a proposed enhancement must be
"idiomatic" in order to be accepted by the BDFL.  (However, "idiomatic"
is an imprecise term; it may be defined as whatever is acceptable to
the BDFL.  This logic is intentionally circular.)  

Once a REP has been accepted, the reference implementation must be
completed.  When the reference implementation is complete and incorporated
into the main source code repository, the status will be changed to "Final".

A REP can also be assigned status "Deferred".  The REP author or an
editor can assign the REP this status when no progress is being made
on the REP.  Once a REP is deferred, a REP editor can re-assign it
to draft status.

A REP can also be "Rejected".  Perhaps after all is said and done it
was not a good idea.  It is still important to have a record of this
fact. The "Withdrawn" status is similar - it means that the REP author
themselves has decided that the REP is actually a bad idea, or has
accepted that a competing proposal is a better alternative.

When a REP is Accepted, Rejected or Withdrawn, the REP should be updated
accordingly. In addition to updating the status field, at the very least
the Resolution header should be added with a link to the relevant post
in the redis-dev mailing list archives.

REPs can also be superseded by a different REP, rendering the original
obsolete.  This is intended for Informational REPs, where version 2 of
an API can replace version 1.

The possible paths of the status of REPs are as follows:

.. image:: rep-0001-1.png

Some Informational and Process REPs may also have a status of "Active"
if they are never meant to be completed.  E.g. REP 1 (this REP).


REP Maintenance
---------------

In general, Features track REPs are no longer modified after they have
reached the Final state. Once a REP has been completed, the Language and
Standard Library References become the formal documentation of the expected
behavior.

Informational and Process REPs may be updated over time to reflect changes
to development practices and other details. The precise process followed in
these cases will depend on the nature and purpose of the REP being updated.



What belongs in a successful REP?
=================================

Each REP should have the following parts:

1. Preamble -- RFC 822 style headers containing meta-data about the
   REP, including the REP number, a short descriptive title (limited
   to a maximum of 44 characters), the names, and optionally the
   contact info for each author, etc.

2. Abstract -- a short (~200 word) description of the technical issue
   being addressed.

3. Copyright/public domain -- Each REP must either be explicitly
   labeled as placed in the public domain (see this REP as an
   example) or licensed under the `Open Publication License`_.

4. Specification -- The technical specification should describe the
   syntax and semantics of any new language feature.  The
   specification should be detailed enough to allow competing,
   interoperable implementations for at least the current major Redis
   platforms (CRedis, Jython, IronRedis, PyPy).

5. Motivation -- The motivation is critical for REPs that want to
   change the Redis language.  It should clearly explain why the
   existing language specification is inadequate to address the
   problem that the REP solves.  REP submissions without sufficient
   motivation may be rejected outright.

6. Rationale -- The rationale fleshes out the specification by
   describing what motivated the design and why particular design
   decisions were made.  It should describe alternate designs that
   were considered and related work, e.g. how the feature is supported
   in other languages.

   The rationale should provide evidence of consensus within the
   community and discuss important objections or concerns raised
   during discussion.

7. Backwards Compatibility -- All REPs that introduce backwards
   incompatibilities must include a section describing these
   incompatibilities and their severity.  The REP must explain how the
   author proposes to deal with these incompatibilities.  REP
   submissions without a sufficient backwards compatibility treatise
   may be rejected outright.

8. Reference Implementation -- The reference implementation must be
   completed before any REP is given status "Final", but it need not
   be completed before the REP is accepted.  While there is merit
   to the approach of reaching consensus on the specification and
   rationale before writing code, the principle of "rough consensus
   and running code" is still useful when it comes to resolving many
   discussions of API details.

   The final implementation must include test code and documentation
   appropriate for either the Redis language reference or the
   standard library reference.


REP Formats and Templates
=========================

There are two REP formats available to authors: plaintext and
reStructuredText_.  Both are UTF-8-encoded text files.

Plaintext REPs are written with minimal structural markup that adheres
to a rigid style.  REP 2 contains a instructions and a template [1]_
you can use to get started writing your plaintext REP.

ReStructuredText_ REPs allow for rich markup that is still quite easy
to read, but results in much better-looking and more functional HTML.
REP 3 contains instructions and a template [2]_ for reStructuredText
REPs.


REP Header Preamble
===================

Each REP must begin with an RFC 822 style header preamble.  The headers
must appear in the following order.  Headers marked with "*" are
optional and are described below.  All other headers are required. ::

    REP: <rep number>
    Title: <rep title>
    Version: <version string>
    Last-Modified: <date string>
    Author: <list of authors' real names and optionally, email addrs>
  * BDFL-Delegate: <REP czar's real name>
  * Discussions-To: <email address>
    Status: <Draft | Active | Accepted | Deferred | Rejected |
             Withdrawn | Final | Superseded>
    Type: <Features Track | Informational | Process>
  * Content-Type: <text/plain | text/x-rst>
  * Requires: <rep numbers>
    Created: <date created on, in dd-mmm-yyyy format>
  * Redis-Version: <version number>
    Post-History: <dates of postings to redis-db and redis-dev>
  * Replaces: <rep number>
  * Superseded-By: <rep number>
  * Resolution: <url>

The Author header lists the names, and optionally the email addresses
of all the authors/owners of the REP.  The format of the Author header
value must be

    Random J. User <address@dom.ain>

if the email address is included, and just

    Random J. User

if the address is not given.  For historical reasons the format
"address@dom.ain (Random J. User)" may appear in a REP, however new
REPs must use the mandated format above, and it is acceptable to
change to this format when REPs are updated.

If there are multiple authors, each should be on a separate line
following RFC 2822 continuation line conventions.  Note that personal
email addresses in REPs will be obscured as a defense against spam
harvesters.

The BDFL-Delegate field is used to record cases where the final decision to
approve or reject a REP rests with someone other than the BDFL. (The
delegate's email address is currently omitted due to a limitation in the
email address masking for reStructuredText REPs)

*Note: The Resolution header is required for Features Track REPs
only.  It contains a URL that should point to an email message or
other web resource where the pronouncement about the REP is made.*

For a REP where final pronouncement will be made on a list other than
redis-dev, a Discussions-To header will indicate the mailing list
or URL where the pronouncement will occur. A temporary Discussions-To header
may also be used when a draft REP is being discussed prior to submission for
pronouncement. No Discussions-To header is necessary if the REP is being
discussed privately with the author, on the redis-db or redis-dev
mailing lists.  Note that email addresses in the Discussions-To header will not
be obscured.

The Type header specifies the type of REP: Features Track,
Informational, or Process.

The format of a REP is specified with a Content-Type header.  The
acceptable values are "text/plain" for plaintext REPs (see REP 9 [3]_)
and "text/x-rst" for reStructuredText REPs (see REP 12 [4]_).
Plaintext ("text/plain") is the default if no Content-Type header is
present.

The Created header records the date that the REP was assigned a
number, while Post-History is used to record the dates of when new
versions of the REP are posted to redis-db and/or redis-dev.  Both
headers should be in dd-mmm-yyyy format, e.g. 14-Aug-2001.

Features Track REPs will typically have a Redis-Version header which
indicates the version of Redis that the feature will be released with.
Features Track REPs without a Redis-Version header indicate
interoperability standards that will initially be supported through
external libraries and tools, and then supplemented by a later REP to
add support to the standard library. Informational and Process REPs do
not need a Redis-Version header.

REPs may have a Requires header, indicating the REP numbers that this
REP depends on.

REPs may also have a Superseded-By header indicating that a REP has
been rendered obsolete by a later document; the value is the number of
the REP that replaces the current document.  The newer REP must have a
Replaces header containing the number of the REP that it rendered
obsolete.


Auxiliary Files
===============

REPs may include auxiliary files such as diagrams.  Such files must be
named ``rep-XXXX-Y.ext``, where "XXXX" is the REP number, "Y" is a
serial number (starting at 1), and "ext" is replaced by the actual
file extension (e.g. "png").


Reporting REP Bugs, or Submitting REP Updates
=============================================

How you report a bug, or submit a REP update depends on several
factors, such as the maturity of the REP, the preferences of the REP
author, and the nature of your comments.  For the early draft stages
of the REP, it's probably best to send your comments and changes
directly to the REP author.  For more mature, or finished REPs you may
want to submit corrections to the Redis `issue tracker`_ so that your
changes don't get lost.  If the REP author is a Redis developer, assign the
bug/patch to them, otherwise assign it to a REP editor.

When in doubt about where to send your changes, please check first
with the REP author and/or a REP editor.

REP authors with Github push privileges for the REP repository can update the
REPs themselves by using "git push" to submit their changes.


Transferring REP Ownership
==========================

It occasionally becomes necessary to transfer ownership of REPs to a
new champion.  In general, it is preferable to retain the original author as
a co-author of the transferred REP, but that's really up to the
original author.  A good reason to transfer ownership is because the
original author no longer has the time or interest in updating it or
following through with the REP process, or has fallen off the face of
the 'net (i.e. is unreachable or not responding to email).  A bad
reason to transfer ownership is because the author doesn't agree with the
direction of the REP.  One aim of the REP process is to try to build
consensus around a REP, but if that's not possible, an author can always
submit a competing REP.

If you are interested in assuming ownership of a REP, send a message
asking to take over, addressed to both the original author and the REP
editors <reps@redis.com>.  If the original author doesn't respond to
email in a timely manner, the REP editors will make a unilateral
decision (it's not like such decisions can't be reversed :).


REP Editor Responsibilities & Workflow
======================================

A REP editor must subscribe to the <reps@redis.com> list.  All
correspondence related to REP administration should be sent (or forwarded) to
<reps@redis.com> (but please do not cross-post!).

For each new REP that comes in an editor does the following:

* Read the REP to check if it is ready: sound and complete.  The ideas
  must make technical sense, even if they don't seem likely to be
  accepted.

* The title should accurately describe the content.

* Edit the REP for language (spelling, grammar, sentence structure,
  etc.), markup (for reST REPs), code style (examples should match REP
  8 & 7).

If the REP isn't ready, an editor will send it back to the author for
revision, with specific instructions.

Once the REP is ready for the repository, a REP editor will:

* Assign a REP number (almost always just the next available number,
  but sometimes it's a special/joke number, like 666 or 3141).
  Remember that numbers below 100 are meta-REPs.

* Add the REP to a local clone of the REP repository.  

  The github repo for the rep is::

    https://github.com/redis/repl

* Commit and push the new (or updated) REP

* Monitor the repo's web page to make sure the REP gets added to the site
  properly. 

* Send email back to the REP author with next steps (post to
  redis-db & redis-dev).

Updates to existing REPs also come in to reps@redis.com  Many REP
authors are not Redis committers yet, so REP editors do the commits for them.

Many REPs are written and maintained by developers with write access
to the Redis codebase.  The REP editors may monitor the commit 
list for REP changes, and correct any structure, grammar, spelling, or
markup mistakes they see.

REP editors don't pass judgment on REPs.  They merely do the
administrative & editorial part (which is generally a low volume task).

Resources:

* TBW

References and Footnotes
========================

.. [1] REP 9, Sample Plaintext REP Template, 
   (http://reps.redis.com/rep-0002)

.. [2] REP 12, Sample reStructuredText REP Template, Goodger, Warsaw
   (http://reps.redis.com/rep-0003)


.. _Open Publication License: http://www.opencontent.org/openpub/

.. _reStructuredText: http://docutils.sourceforge.net/rst.html

.. _REP repository: http://github.com/redis/repl


Copyright
=========

This document has been placed in the public domain.


